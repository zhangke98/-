//web安全 XSS和CSRF


XSS跨站脚本攻击，是一种代码注入攻击,攻击者通过在目标网站上注入恶意脚本，当它在用户的浏览器上运行的时候，攻击者就可获取用户的敏感信息如 Cookie、SessionID 等，进而危害数据安全。

根据攻击的来源，XSS 攻击可分为存储型(持久型)、反射型(非持久型)和 DOM 型三种。
存储型：存储到数据库，再次访问的时候渲染到页面，就执行了恶意代码
反射型：在url中注入恶意代码，直接显示到页面上
dom型：是纯前端的漏洞，通过在DOM树中植入js代码

预防xss
(1)设置httpOnly: js脚本将无法读取到 cookie 信息。 
express ：res.cookie('rememberme', '1', {httpOnly: true });
(2)替换特殊字符，比如小于号大于号等 ‘<’ 变为 ‘&lt ’  ‘>’ 变为 ‘&gt’
前端（显示时）后端（存储时）都需要替换



CSRF跨站请求伪造，攻击者伪造网站后台某个功能接口的请求地址，诱导用户去点击或者用特殊方法让该请求地址自动加载。用户在登录状态下这个请求被服务端接收后会被误以为是用户合法的操作。

预防csrf
(1)增加验证:例如密码、短信验证码、指纹等
(2)使用token验证。
(3)在服务器端验证请求的来源站点。因为CSRF攻击大多数都是来自第三方站点。


在浏览器向服务器发起请求时，服务器生成一个Token（字符串）发送给浏览器，然后将该字符串放入页面中
浏览器请求时（如表单提交）需要带上这个Token。服务器收到请求后，验证是否合法，如果不合法拒绝即可。



打个比方，你在B服务器上提交，B服务器将数据转发到A服务器。如果没有这个token，A服务器通过cookie 确认了你的身份然后就接收了，攻击完成。
加入了 token 后，由于 token 是根据用户访问 A 服务器页面生成的，B 服务器没有办法获取，失败。
其它站点很难拿到token


二者区别：
1.XSS是像你的页面注入JS脚本执行，在JS里面去做他想做的事情；无需做权限认证；
2.CSRF是用你API本身的漏洞，帮你自动执行；需要登录认证；



用户在网站A已经认证，在认证cookie还没有失效的状况下。在访问B网站时，B网站的一个操作指向了A的服务器。当B网站引诱用户点击这个操作时，指向A的请求会带上A认证的COOKIE（请求伪造）。

当A加上token保护这个请求时，相当于每次都会验证该请求的来源。加大B网站伪造的难度，达到保护目的。

网站加上token主要是加大了请求伪造的难度（特别是自动攻击），并不能完全阻挡CSRF攻击。




cookie：登陆后，后端生成一个sessionid放在cookie中返回给客户端，并且服务端一直记录着这个sessionid，！！！自动客户端以后每次请求都会带上这个sessionid，服务端通过这个sessionid来验证身份之类的操作。所以别人拿到了cookie等于拿到了sessionid，就可以完全替代你。

token：登陆后，后端会返回一个token给客户端，客户端将这个token存储起来，然后每次客户端请求都需要开发者手动！！！！将token放在header中带过去，服务端每次只需要对这个token进行验证就能使用token中的信息来进行下一步操作了。




cookie：用户点击了链接，cookie未失效，导致发起请求后后端以为是用户正常操作，于是进行扣款操作。

token：用户点击链接，由于浏览器不会自动带上token，所以即使发了请求，后端的token验证不会通过，所以不会进行扣款操作。





