WebSocket是HTML5中的协议

轮询：客户端定时向服务器发送Ajax请求，服务器接到请求后马上返回响应信息并关闭连接
缺点：请求中有大半是无用，浪费带宽和服务器资源。


长轮询：客户端向服务器发送Ajax请求，服务器接到请求后hold住连接，直到有新消息才返回响应信息并关闭连接（或到了设定的超时时间关闭连接），客户端处理完响应信息后再向服务器发送新的请求。
有点:在无消息的情况下不会频繁的请求，节省了网络流量，解决了服务端一直疲于接受请求的窘境



WebSocket和HTTP都属于应用层协议，且都是基于TCP的

WebSocket是HTML5最新提出的规范，虽然主流浏览器都已经支持，但仍然可能有不兼容的情况，为了兼容所有浏览器，给程序员提供一致的编程体验，SocketIO将WebSocket、AJAX和其它的通信方式全部封装成了统一的通信接口，也就是说，我们在使用SocketIO时，不用担心兼容问题，底层会自动选用最佳的通信方式。因此说，WebSocket是SocketIO的一个子集。

Socket.io将Websocket和ajax轮询（Polling）不是长轮询，机制以及其它的实时通信方式封装成了通用的接口，并且在服务端实现了这些实时通信机制。

　　Socket.io中主要使用了websocket，将轮询作为其辅助选项，提供的是相同的接口。其与node.js一样，也是事件驱动的


websocket是长连接
WebSocket协议，客户端和服务端都可以主动的推送消息，可以是文本也可以是二进制数据。而且没有同源策略的限制，不存在跨域问题。协议的标识符就是ws。像https一样如果加密的话就是wxs。


为了建立链接，客户端要先向服务端发送一个带"Upgrade:WebSocket"（申请协议升级的HTTP请求）头信息的HTTP请求，服务端解析后应答，建立成功。





创建 WebSocket对象 var ws = new WebSocket(url, [protocol])
ws.onopen() 打开连接
ws.send() 向服务端发送信息
ws.onmessage() 来接收服务端信息
ws.close() 关闭连接


WebSocket 解决的第一个问题是，通过第一个 HTTP request 建立了 TCP 连接之后，之后的交换数据都不需要再发 HTTP request了是一个类似管道的效果






