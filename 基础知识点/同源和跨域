平时大家提到的跨域问题存在的原因是：浏览器的同源策略限制。服务器不允许
简言之，跨域是因为浏览器为了安全问题产生的拦截，非浏览器环境就不存在跨域问题，
如直接从服务端nodeJS向另一个服务器发起请求，就不会出现跨域问题。
同源策略是浏览器的安全策略，不是HTTP协议的一部分
当非同源时，ajax跨域请求可以发送，但是拒绝接受响应
页面中的链接,重定向以及表单提交是不会受到同源策略限制的

同源：协议、域名、端口，三者必须一致

什么是同源策略？
ajax请求时，浏览器要求和当前网页的server必须同源（安全）

可以不遵守同源策略的情况：
加载图片img、css、js可以无视同源策略
<img src=跨域的图片地址>  注意防盗链，是服务器做的
<link href=跨域的css地址>
<script src=跨域的js地址></script>
利用以上三个可以做什么
<img />可用于统计打点，可使用第三方统计服务  pv
<link />  <script>可使用CDN，CDN一般都是外域
<script>可实现JSONP   <img>  <link>都可以
理论上来说，如果考虑回调，需要使用script，使用jsonp技术。那么如果只是单纯地想跨域发一个request，那么选择script或者img等元素也无关紧要了。


跨域
所有的跨域都必须经过server端允许、server端配合，未经server端允许就实现跨域，说明浏览器有漏洞，这是危险信号


jsonp原理： 
缺点：
1.只能get不安全
2.需要后端支持。

利用script标签可以绕过同源限制的特点
在src的url中问号传参 通过callback传一个func参数
func是本地自己写的
服务器接收到请求之后，会返回一个函数，函数名就是传过去的func参数，函数还有一个实参，实参就是我们想要的数据

当请求成功之后，由于后端返回的是一个回调函数，所以一旦请求成功，函数就会被立即解析执行。
前端需要先定义一个回调函数，否则请求成功之后会发生报错。

CORS：通过设置响应头,允许跨域请求
通过服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。
http-proxy是webpack-dev-Server提供的所以只能本地使用

线上
nginx反向代理




